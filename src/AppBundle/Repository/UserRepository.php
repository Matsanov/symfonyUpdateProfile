<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Image;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManager $em, Mapping\ClassMetadata $metadata = null)
    {
        parent::__construct($em, $metadata == null ? new Mapping\ClassMetadata(User::class) : $metadata);
    }

    public function getUsers(){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('count(user_id) as images_count,user_id,u.username,u.id')->from('users', 'u')
            ->leftJoin('u','images','i','i.user_id = u.id')
            ->groupBy('u.id')
            ->addOrderBy('images_count','DESC');

        return $qb->execute();
    }

    public function getLastFiveUsers(){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('username')->from('users')
            ->addOrderBy('id','DESC')
            ->setMaxResults(5);

        return $qb->execute();

    }

    public function userData(){
        //$this->db->select('id, username, date_added')->from('users')->get()->result_array();
/**
        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('id,username,dateAdded')->from('users');

        return $result = $qb->execute();
 * **/

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('count(user_id) as comments_count,user_id,u.username,u.id,u.dateAdded')->from('users', 'u')
            ->leftJoin('u','comment','c','c.user_id = u.id')
            ->groupBy('u.id')
            ->addOrderBy('comments_count','DESC');

        return $qb->execute();
    }

    public function deleteUser($userId){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->delete('users')->where('id = :id')->setParameter('id',$userId);

        return $result = $qb->execute();
    }
}
