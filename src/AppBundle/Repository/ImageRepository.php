<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Image;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping;

/**
 * ImagesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManager $em, Mapping\ClassMetadata $metadata = null)
    {
        parent::__construct($em, $metadata == null ? new Mapping\ClassMetadata(Image::class) : $metadata);
    }

    public function allImages(){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('*,u.username,i.id as image_id')->from('images', 'i')
            ->Join('i','users','u','u.id = i.user_id')
            ->addOrderBy('image_id','DESC');

        return $qb->execute();
    }

    public function userImages($userId){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('*')->from('images')->where('user_id = :id')->setParameter('id',$userId)->addOrderBy('id','DESC');

        return $result = $qb->execute();
    }

    public function imageName($imageId){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('name,id')->from('images')->where('id = :id')->setParameter('id',$imageId)->addOrderBy('id','DESC');

        return $result = $qb->execute();
    }

    public function getLimitImages()
    {
        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('*,u.username')->from('images', 'i')
            ->join('i','users','u','u.id = i.user_id')
            ->addOrderBy('i.id','DESC')
            ->setMaxResults(10);

        return $result = $qb->execute();
        /**
        return $this->db->select('i.*, u.username')
            ->from('images as i')->join('users as u', 'i.userID = u.id')
            ->order_by('i.id', 'DESC')
            ->limit(10)
            ->get()
            ->result_array();
         **/
    }

    public function imagesCount($userId)
    {

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('count(user_id)')->from('images')->where('user_id = :id')->setParameter('id',$userId);

        return $result = $qb->execute()->fetchAll();

    }

    public function lastFiveImages(){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->select('*,i.id as image_id,u.username')->from('images', 'i')
            ->join('i','users','u','u.id = i.user_id')
            ->addOrderBy('i.id','DESC')
            ->setMaxResults(5);

        return $result = $qb->execute();
    }

    public function deleteImage($imageId){

        $db = $this->getEntityManager()->getConnection();
        $qb = $db->createQueryBuilder();

        $qb->delete('images')->where('id = :id')->setParameter('id',$imageId);

        return $result = $qb->execute();
    }
}
